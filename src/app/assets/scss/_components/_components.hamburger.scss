/*!
 * Hamburgers
 * @description Tasty CSS-animated hamburgers
 * @author Jonathan Suh @jonsuh
 * @site https://jonsuh.com/hamburgers
 * @link https://github.com/jonsuh/hamburgers
 */

// Settings
// ==================================================
$hamburger-padding-x                       : 5px !default;
$hamburger-padding-y                       : 5px !default;
$hamburger-layer-width                     : 35px !default;
$hamburger-layer-height                    : 3px !default;
$hamburger-layer-spacing                   : 5px !default;
$hamburger-layer-color                     : $yom-cod !default;
$hamburger-layer-border-radius             : 4px !default;
$hamburger-hover-opacity                   : 0.7 !default;
$hamburger-hover-transition-duration       : 0.15s !default;
$hamburger-hover-transition-timing-function: linear !default;

// To use CSS filters as the hover effect instead of opacity,
// set $hamburger-hover-use-filter as true and
// change the value of $hamburger-hover-filter accordingly.
$hamburger-hover-use-filter: false !default;
$hamburger-hover-filter    : opacity(50%) !default;

// Base Hamburger (We need this)
// ==================================================
// Hamburger
// ==================================================
.hamburger {
  display: inline-block;

  margin: 0;
  padding: $hamburger-padding-y $hamburger-padding-x;

  border: 0;

  transition-duration: $hamburger-hover-transition-duration;
  transition-property: opacity, filter;
  transition-timing-function: $hamburger-hover-transition-timing-function;

  background-color: transparent;

  color: inherit;

  font: inherit;

  text-transform: none;

  cursor: pointer;
  overflow: visible;

  &:hover {
    @if $hamburger-hover-use-filter == true {
      filter: $hamburger-hover-filter;
    }

    @else {
      opacity: $hamburger-hover-opacity;
    }
  }
}

.hamburger-box {
  position: relative;

  display: inline-block;
  width: $hamburger-layer-width;
  height: $hamburger-layer-height * 3 + $hamburger-layer-spacing * 2;
}

.hamburger-inner {
  top: 50%;

  display: block;

  margin-top: $hamburger-layer-height / -2;

  &,
  &:before,
  &:after {
    position: absolute;

    width: $hamburger-layer-width;
    height: $hamburger-layer-height;

    transition-duration: 0.15s;
    transition-property: transform;
    transition-timing-function: ease;

    border-radius: $hamburger-layer-border-radius;

    background-color: $hamburger-layer-color;
  }

  &:before,
  &:after {
    display: block;

    content: '';
  }

  &:before {
    top: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
  }

  &:after {
    bottom: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
  }
}

// Hamburger types
// ==================================================

/*
 * Squeeze
 */
.hamburger--squeeze {
  .hamburger-inner {
    transition-duration: 0.1s;
    transition-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);

    &:before {
      transition: top 0.1s 0.14s ease, opacity 0.1s ease;
    }

    &:after {
      transition: bottom 0.1s 0.14s ease, transform 0.1s cubic-bezier(0.55, 0.055, 0.675, 0.19);
    }
  }

  &.is-active {
    .hamburger-inner {
      transform: rotate(45deg);

      transition-delay: 0.14s;
      transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);

      &:before {
        top: 0;

        transition: top 0.1s ease, opacity 0.1s 0.14s ease;

        opacity: 0;
      }

      &:after {
        bottom: 0;

        transform: rotate(-90deg);

        transition: bottom 0.1s ease, transform 0.1s 0.14s cubic-bezier(0.215, 0.61, 0.355, 1);
      }
    }
  }
}

// ==================================================
// Cooking up additional types:
//
// The Sass for each hamburger type should be nested
// inside an @if directive to check whether or not
// it exists in $hamburger-types so only the CSS for
// included types are generated.
//
// e.g. hamburgers/types/_new-type.scss
//
// @if index($hamburger-types, new-type) {
//   .hamburger--new-type {
//     ...
//   }
// }
